/*
 * This file is generated by jOOQ.
*/
package com.danyl.shiro.jooq.gen.shiro.tables.records;


import com.danyl.shiro.jooq.gen.shiro.tables.PermissionRole;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PermissionRoleRecord extends TableRecordImpl<PermissionRoleRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = -1249482087;

    /**
     * Setter for <code>PUBLIC.PERMISSION_ROLE.RID</code>.
     */
    public PermissionRoleRecord setRid(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.PERMISSION_ROLE.RID</code>.
     */
    public Integer getRid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>PUBLIC.PERMISSION_ROLE.PID</code>.
     */
    public PermissionRoleRecord setPid(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.PERMISSION_ROLE.PID</code>.
     */
    public Integer getPid() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return PermissionRole.PERMISSION_ROLE.RID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return PermissionRole.PERMISSION_ROLE.PID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getRid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getPid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getRid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getPid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PermissionRoleRecord value1(Integer value) {
        setRid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PermissionRoleRecord value2(Integer value) {
        setPid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PermissionRoleRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PermissionRoleRecord
     */
    public PermissionRoleRecord() {
        super(PermissionRole.PERMISSION_ROLE);
    }

    /**
     * Create a detached, initialised PermissionRoleRecord
     */
    public PermissionRoleRecord(Integer rid, Integer pid) {
        super(PermissionRole.PERMISSION_ROLE);

        set(0, rid);
        set(1, pid);
    }
}
