/*
 * This file is generated by jOOQ.
*/
package com.danyl.spiders.jooq.gen.proxy.tables;


import com.danyl.spiders.jooq.gen.proxy.DefaultSchema;
import com.danyl.spiders.jooq.gen.proxy.Indexes;
import com.danyl.spiders.jooq.gen.proxy.Keys;
import com.danyl.spiders.jooq.gen.proxy.tables.records.ProxyRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Proxy extends TableImpl<ProxyRecord> {

    private static final long serialVersionUID = 1851969008;

    /**
     * The reference instance of <code>proxy</code>
     */
    public static final Proxy PROXY = new Proxy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProxyRecord> getRecordType() {
        return ProxyRecord.class;
    }

    /**
     * The column <code>proxy.ip</code>.
     */
    public final TableField<ProxyRecord, String> IP = createField("ip", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>proxy.port</code>.
     */
    public final TableField<ProxyRecord, Integer> PORT = createField("port", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>proxy.speed</code>.
     */
    public final TableField<ProxyRecord, Integer> SPEED = createField("speed", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("60000", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>proxy.type</code>.
     */
    public final TableField<ProxyRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(15).defaultValue(org.jooq.impl.DSL.field("'http'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>proxy.is_valid</code>.
     */
    public final TableField<ProxyRecord, Boolean> IS_VALID = createField("is_valid", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>proxy.comment</code>.
     */
    public final TableField<ProxyRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.VARCHAR(45).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>proxy.create_time</code>.
     */
    public final TableField<ProxyRecord, LocalDateTime> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("datetime('now','localtime')", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>proxy</code> table reference
     */
    public Proxy() {
        this(DSL.name("proxy"), null);
    }

    /**
     * Create an aliased <code>proxy</code> table reference
     */
    public Proxy(String alias) {
        this(DSL.name(alias), PROXY);
    }

    /**
     * Create an aliased <code>proxy</code> table reference
     */
    public Proxy(Name alias) {
        this(alias, PROXY);
    }

    private Proxy(Name alias, Table<ProxyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Proxy(Name alias, Table<ProxyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SQLITE_AUTOINDEX_PROXY_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProxyRecord> getPrimaryKey() {
        return Keys.PK_PROXY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProxyRecord>> getKeys() {
        return Arrays.<UniqueKey<ProxyRecord>>asList(Keys.PK_PROXY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Proxy as(String alias) {
        return new Proxy(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Proxy as(Name alias) {
        return new Proxy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Proxy rename(String name) {
        return new Proxy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Proxy rename(Name name) {
        return new Proxy(name, null);
    }
}
