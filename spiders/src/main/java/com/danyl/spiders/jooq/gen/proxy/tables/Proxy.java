/*
 * This file is generated by jOOQ.
*/
package com.danyl.spiders.jooq.gen.proxy.tables;


import com.danyl.spiders.jooq.gen.proxy.Indexes;
import com.danyl.spiders.jooq.gen.proxy.Keys;
import com.danyl.spiders.jooq.gen.proxy.Public;
import com.danyl.spiders.jooq.gen.proxy.tables.records.ProxyRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Proxy extends TableImpl<ProxyRecord> {

    private static final long serialVersionUID = -1009994417;

    /**
     * The reference instance of <code>PUBLIC.PROXY</code>
     */
    public static final Proxy PROXY = new Proxy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProxyRecord> getRecordType() {
        return ProxyRecord.class;
    }

    /**
     * The column <code>PUBLIC.PROXY.IP</code>. 代理IP
     */
    public final TableField<ProxyRecord, String> IP = createField("IP", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "代理IP");

    /**
     * The column <code>PUBLIC.PROXY.PORT</code>. 端口
     */
    public final TableField<ProxyRecord, Integer> PORT = createField("PORT", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "端口");

    /**
     * The column <code>PUBLIC.PROXY.IS_VALID</code>. 是否可用
     */
    public final TableField<ProxyRecord, Boolean> IS_VALID = createField("IS_VALID", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("FALSE", org.jooq.impl.SQLDataType.BOOLEAN)), this, "是否可用");

    /**
     * The column <code>PUBLIC.PROXY.ANONYMITY</code>. 匿名性
     */
    public final TableField<ProxyRecord, String> ANONYMITY = createField("ANONYMITY", org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "匿名性");

    /**
     * The column <code>PUBLIC.PROXY.SPEED</code>. 响应耗时
     */
    public final TableField<ProxyRecord, Integer> SPEED = createField("SPEED", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("15000", org.jooq.impl.SQLDataType.INTEGER)), this, "响应耗时");

    /**
     * The column <code>PUBLIC.PROXY.PROTOCOL</code>. 支持协议
     */
    public final TableField<ProxyRecord, String> PROTOCOL = createField("PROTOCOL", org.jooq.impl.SQLDataType.VARCHAR(10).defaultValue(org.jooq.impl.DSL.field("'http'", org.jooq.impl.SQLDataType.VARCHAR)), this, "支持协议");

    /**
     * The column <code>PUBLIC.PROXY.CHECKED_TIME</code>. 上次校验
     */
    public final TableField<ProxyRecord, LocalDateTime> CHECKED_TIME = createField("CHECKED_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "上次校验");

    /**
     * The column <code>PUBLIC.PROXY.CREATED_TIME</code>. 入库时间
     */
    public final TableField<ProxyRecord, LocalDateTime> CREATED_TIME = createField("CREATED_TIME", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "入库时间");

    /**
     * The column <code>PUBLIC.PROXY.SOURCE</code>. 来源
     */
    public final TableField<ProxyRecord, String> SOURCE = createField("SOURCE", org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "来源");

    /**
     * The column <code>PUBLIC.PROXY.COUNTRY</code>.
     */
    public final TableField<ProxyRecord, String> COUNTRY = createField("COUNTRY", org.jooq.impl.SQLDataType.VARCHAR(128).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.PROXY.CITY</code>. 省市
     */
    public final TableField<ProxyRecord, String> CITY = createField("CITY", org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "省市");

    /**
     * The column <code>PUBLIC.PROXY.REGION</code>. 县区
     */
    public final TableField<ProxyRecord, String> REGION = createField("REGION", org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "县区");

    /**
     * The column <code>PUBLIC.PROXY.ISP</code>.
     */
    public final TableField<ProxyRecord, String> ISP = createField("ISP", org.jooq.impl.SQLDataType.VARCHAR(256).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.PROXY.HOST</code>. 主机名
     */
    public final TableField<ProxyRecord, String> HOST = createField("HOST", org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "主机名");

    /**
     * The column <code>PUBLIC.PROXY.VIA</code>. 经由
     */
    public final TableField<ProxyRecord, String> VIA = createField("VIA", org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "经由");

    /**
     * Create a <code>PUBLIC.PROXY</code> table reference
     */
    public Proxy() {
        this(DSL.name("PROXY"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.PROXY</code> table reference
     */
    public Proxy(String alias) {
        this(DSL.name(alias), PROXY);
    }

    /**
     * Create an aliased <code>PUBLIC.PROXY</code> table reference
     */
    public Proxy(Name alias) {
        this(alias, PROXY);
    }

    private Proxy(Name alias, Table<ProxyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Proxy(Name alias, Table<ProxyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_8);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProxyRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProxyRecord>> getKeys() {
        return Arrays.<UniqueKey<ProxyRecord>>asList(Keys.CONSTRAINT_4);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Proxy as(String alias) {
        return new Proxy(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Proxy as(Name alias) {
        return new Proxy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Proxy rename(String name) {
        return new Proxy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Proxy rename(Name name) {
        return new Proxy(name, null);
    }
}
